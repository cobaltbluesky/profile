{"version":3,"sources":["components/Drawer.jsx","components/Header.jsx","components/Home.jsx","components/AboutMe.jsx","components/AboutThisPage.jsx","components/Tweets.jsx","components/Contact.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","isSelect","backgroundColor","paper","background","button","withRouter","props","now","nowpage","count","i","length","isHomeNow","isAboutMeNow","isAboutThisPageNow","isTweetsNow","isContactNow","classes","React","useState","left","state","setState","toggleDrawer","open","event","handleToHome","history","push","handleToAboutMe","handleToAboutThisPage","handleToTweets","handleToContact","IconButton","onClick","edge","color","SwipeableDrawer","onClose","className","List","ListItem","ListItemText","Divider","theme","menuButton","marginRight","spacing","title","flexGrow","Appbar","top","position","Header","AppBar","Toolbar","window","location","href","Typography","variant","Home","AboutMe","src","alt","AboutThisPage","Tweets","sourceType","screenName","Contact","App","basename","process","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4797d357.chunk.js","sourcesContent":["import React from 'react';\nimport {withRouter} from 'react-router';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport Divider from '@material-ui/core/Divider';\nimport {List,ListItem,IconButton} from '@material-ui/core';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  isSelect:{\n    backgroundColor:'#bce2e8'\n  },\n  paper:{\n    background:'#4c6cb3'\n  },\n  button:{\n    background:'#4c6cb3',\n    '&:hover': {\n        backgroundColor:'#67b5b7',\n    }\n  }\n});\n\nconst Drawer=(props)=>{\n  //URLから現在地を抽出\n  let now=props.now;\n  let nowpage='';\n  let count=0;\n  for(let i=0;i<now.length;i++){\n    if(count>3)nowpage+=now[i];\n    if(now[i]==='/')count++;\n  }\n  //現在地にtrueを渡す\n  let isHomeNow=false;\n  let isAboutMeNow=false;\n  let isAboutThisPageNow=false;\n  let isTweetsNow=false;\n  let isContactNow=false;\n  if(nowpage==='')isHomeNow=true;\n  if(nowpage==='AboutMe')isAboutMeNow=true;\n  if(nowpage==='AboutThisPage')isAboutThisPageNow=true;\n  if(nowpage==='Tweets')isTweetsNow=true;\n  if(nowpage==='Contact')isContactNow=true;\n\n  const classes=useStyles();\n\n  const [state, setState] = React.useState({left: false});\n\n  const toggleDrawer=(open)=>event=>setState({'left':open });\n\n  const handleToHome=()=>{\n    props.history.push('./');\n  }\n  const handleToAboutMe=()=>{\n    props.history.push('/AboutMe');\n  }\n  const handleToAboutThisPage=()=>{\n    props.history.push('/AboutThisPage');\n  }\n  const handleToTweets=()=>{\n    props.history.push('/Tweets');\n  }\n  const handleToContact=()=>{\n    props.history.push('/Contact');\n  }\n\n  const sideList=()=>(\n    <div\n      className={classes.list}\n      onClick={toggleDrawer(false)}\n    >\n      <List>\n        <ListItem\n          onClick={handleToHome}\n          className={isHomeNow?classes.isSelect:classes.button}\n        >\n          <ListItemText>Home</ListItemText>\n        </ListItem>\n        <Divider/>\n        <ListItem\n          onClick={handleToAboutThisPage}\n          className={isAboutThisPageNow?classes.isSelect:classes.button}\n        >\n          <ListItemText>AboutThisPage</ListItemText>\n        </ListItem>\n        <Divider/>\n        <ListItem\n          onClick={handleToAboutMe}\n          className={isAboutMeNow?classes.isSelect:classes.button}\n        >\n          <ListItemText>AboutMe</ListItemText>\n        </ListItem>\n        <Divider/>\n        <ListItem\n          onClick={handleToTweets}\n          className={isTweetsNow?classes.isSelect:classes.button}\n        >\n          <ListItemText>Tweets</ListItemText>\n        </ListItem>\n        <Divider/>\n        <ListItem\n          onClick={handleToContact}\n          className={isContactNow?classes.isSelect:classes.button}\n        >\n          <ListItemText>Contact</ListItemText>\n        </ListItem>\n        <Divider/>\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      <IconButton\n        onClick={toggleDrawer(true)}\n        edge='start'\n        color='inherit'\n      >\n        <MenuIcon/>\n      </IconButton>\n      <SwipeableDrawer\n        open={state.left}\n        onClose={toggleDrawer(false)}\n        classes={{paper:classes.paper}}\n      >\n        {sideList()}\n      </SwipeableDrawer>\n    </div>\n  );\n}\n\nexport default withRouter(Drawer);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Drawer from './Drawer';\n\nconst useStyles = makeStyles(theme => ({\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  Appbar:{\n    backgroundColor:'#414fa3',\n    top:0,\n    position:'sticky',\n  }\n}));\n\nconst Header=()=>{\n  const classes=useStyles();\n  return(\n    <AppBar position=\"static\"className={classes.Appbar}>\n      <Toolbar>\n      <Drawer now={window.location.href}/>\n        <Typography variant=\"h6\" className={classes.title}>\n          gunjou's portfolio(仮)\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Header from './Header';\n\nconst Home=()=>(\n  <div>\n    <Header/>\n    <h5>更新履歴</h5>\n    <p>2020/02/10:ドロワーメニューにhover属性を追加しAboutThisPageコンポーネントを生やしてルーティングさせました。</p>\n    <p>2020/02/02:TwitterCardの設定をしました。</p>\n    <p>2020/01/31:フッターと一部表示を消しました。</p>\n    <p>2020/01/07:ドロワーメニューの現在地を水色で表示させ、Contactページを生やしました。</p>\n    <p>2020/01/06:コンポーネントの細分化、ツイートの埋め込みを行いました。</p>\n    <p>2020/01/05:あまりにも殺風景なので背景色を水色に変更しました</p>\n    <p>2020/01/04:ヘッダーとドロワーを付けて仮自己紹介ページを作ってルーティングしました。</p>\n  </div>\n)\nexport default Home;\n","import React from 'react';\nimport Header from './Header';\n\nconst AboutMe=()=>{\n  return(\n    <div>\n      <Header/>\n      <img src='./shizuku192.png'alt='IconBy荻素'/>\n      <h3>HN:gunjou</h3>\n      <h3>本名:田栗青空</h3>\n      <h3>ほんみょう:たぐりせいあ</h3>\n      <h3>年齢:16歳</h3>\n      <h3>学校:久留米高専</h3>\n      <h3>学科:制御情報工学科</h3>\n      <h3>学年:2年生</h3>\n      <h3>誕生日:2003年3月16日生まれ</h3>\n      <h3>音ゲー:CHUNITHM15.75</h3>\n    </div>\n\n  );\n}\nexport default AboutMe;\n","import React from 'react';\nimport Header from './Header';\n\nconst AboutThisPage=()=>{\n  return(\n    <div>\n      <Header/>\n      <h3>React.jsというJavascriptフレームワークを使って作りました。</h3>\n      <h3>github.ioでのルーティングにreact-routerを使用しているためリクエストが処理できずURLを直叩きすると404を吐かれます。</h3>\n      <h3>ページ上部のアプリバーとドロワーにはmaterial-uiというCSSフレームワークを使っています。</h3>\n      <h3>今はとても殺風景なサイトですが春休みにドメイン取ってThree.jsとReact.jsを使ってゴリゴリの３Dポートフォリオを作る予定なのでお楽しみに！</h3>\n    </div>\n  )\n}\nexport default AboutThisPage;\n","import React from 'react';\nimport Header from './Header';\nimport {TwitterTimelineEmbed} from 'react-twitter-embed';\n\nconst Tweets=()=>(\n  <div>\n    <Header/>\n    <TwitterTimelineEmbed  sourceType='profile'screenName='hagukipain'/>\n  </div>\n)\nexport default Tweets;\n","import React from 'react';\nimport Header from './Header';\n\nconst Contact=()=>(\n  <div>\n    <Header/>\n    <h2>\n      twitter:\n      <a href='https://twitter.com/hagukipain'>\n        @hagukipain\n      </a>\n    </h2>\n    <h2>\n      GitHub:\n      <a href=\"https://github.com/cobaltbluesky\">\n        @cobaltbluesky\n      </a>\n    </h2>\n  </div>\n)\nexport default Contact;\n","import React from 'react';\nimport {BrowserRouter,Route}from 'react-router-dom';\nimport Home from './Home';\nimport AboutMe from './AboutMe';\nimport AboutThisPage from './AboutThisPage';\nimport Tweets from './Tweets';\nimport Contact from './Contact';\n\nconst App=()=>{\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <switch>\n        <Route exact path='/'component={Home}/>\n        <Route exact path='/AboutThisPage'component={AboutThisPage}/>\n        <Route path='/AboutMe'component={AboutMe}/>\n        <Route path='/Tweets'component={Tweets}/>\n        <Route path='/Contact'component={Contact}/>\n      </switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}