{"version":3,"sources":["components/Drawer.jsx","components/Header.jsx","components/Footer.jsx","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","paper","background","withRouter","props","classes","React","useState","left","state","setState","toggleDrawer","open","event","handleToHOME","history","push","handleToAboutMe","IconButton","onClick","edge","color","SwipeableDrawer","onClose","className","List","ListItem","button","ListItemText","theme","menuButton","marginRight","spacing","title","flexGrow","Header","AppBar","position","style","backgroundColor","Toolbar","Typography","variant","div","textAlign","padding","bottom","Footer","Divider","Home","img","float","AboutMe","src","alt","href","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUASMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,KAETC,MAAM,CACJC,WAAW,aAqDAC,eAjDF,SAACC,GACZ,IAAMC,EAAUR,IADI,EAEMS,IAAMC,SAAS,CAACC,MAAM,IAF5B,mBAEbC,EAFa,KAENC,EAFM,KAIdC,EAAa,SAACC,GAAD,OAAQ,SAAAC,GAAK,OAAEH,EAAS,CAAC,KAAOE,MAE7CE,EAAa,WACjBV,EAAMW,QAAQC,KAAK,OAEfC,EAAgB,WACpBb,EAAMW,QAAQC,KAAK,aAmBrB,OACE,6BACE,kBAACE,EAAA,EAAD,CACEC,QAASR,GAAa,GACtBS,KAAK,QACLC,MAAM,WAEN,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACEV,KAAMH,EAAMD,KACZe,QAASZ,GAAa,GACtBN,QAAS,CAACJ,MAAMI,EAAQJ,QA3B5B,yBACEuB,UAAWnB,EAAQN,KACnBoB,QAASR,GAAa,IAEtB,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACR,QAASL,GACxB,kBAACc,EAAA,EAAD,cAEF,kBAACF,EAAA,EAAD,CAAUC,QAAM,EAACR,QAASF,GACxB,kBAACW,EAAA,EAAD,wBClCJ/B,EAAYC,aAAW,SAAA+B,GAAK,MAAK,CACrCC,WAAY,CACVC,YAAaF,EAAMG,QAAQ,IAE7BC,MAAO,CACLC,SAAU,OAkBCC,EAdF,WACX,IAAM9B,EAAQR,IACd,OACE,kBAACuC,EAAA,EAAD,CAAQC,SAAS,SAAQC,MAAO,CAACC,gBAAgB,YAC/C,kBAACC,EAAA,EAAD,KACA,kBAAC,EAAD,MACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKlB,UAAWnB,EAAQ4B,OAA5C,yB,QCnBFpC,EAAUC,YAAW,CACzB6C,IAAI,CACF3C,MAAM,OACN4C,UAAU,SACVC,QAAQ,QACRR,SAAS,WACTS,OAAO,KAaIC,EATF,WACX,IAAM1C,EAAQR,IACd,OACE,2BAAO2B,UAAWnB,EAAQsC,KACxB,kBAACK,EAAA,EAAD,MACA,2CCIAC,GAhBUnD,YAAW,CACzBoD,IAAI,CACFC,MAAM,UAcC,kBACT,6BACE,kBAAC,EAAD,MACA,sMACA,wDACA,0LACA,kQACA,kBAAC,EAAD,SAGEC,EAAQ,kBACZ,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKC,IAAI,mBAAkBC,IAAI,uBAC/B,gEACA,sCACA,+GACA,2EACA,uCAEE,uBAAGC,KAAK,uCAAR,uBAKSC,EApCL,WACR,OACE,kBAAC,IAAD,CAAeC,SAAUC,YACvB,gCACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAGC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,WAAUC,UAAWT,OCLrBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08e7b422.chunk.js","sourcesContent":["import React from 'react';\r\nimport {withRouter} from 'react-router';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport {List,ListItem,IconButton} from '@material-ui/core';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  paper:{\r\n    background:'#4c6cb3'\r\n  }\r\n});\r\n\r\nconst Drawer=(props)=>{\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({left: false});\r\n\r\n  const toggleDrawer=(open)=>event=>setState({'left':open });\r\n\r\n  const handleToHOME=()=>{\r\n    props.history.push('./');\r\n  }\r\n  const handleToAboutMe=()=>{\r\n    props.history.push('/AboutMe');\r\n  }\r\n\r\n  const sideList=()=>(\r\n    <div\r\n      className={classes.list}\r\n      onClick={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        <ListItem button onClick={handleToHOME}>\r\n          <ListItemText>HOME</ListItemText>\r\n        </ListItem>\r\n        <ListItem button onClick={handleToAboutMe}>\r\n          <ListItemText>AboutMe</ListItemText>\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        onClick={toggleDrawer(true)}\r\n        edge='start'\r\n        color='inherit'\r\n      >\r\n        <MenuIcon/>\r\n      </IconButton>\r\n      <SwipeableDrawer\r\n        open={state.left}\r\n        onClose={toggleDrawer(false)}\r\n        classes={{paper:classes.paper}}\r\n      >\r\n        {sideList()}\r\n      </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Drawer);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Drawer from './Drawer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Header=()=>{\r\n  const classes=useStyles();\r\n  return(\r\n    <AppBar position=\"static\"style={{backgroundColor:'#414fa3'}}>\r\n      <Toolbar>\r\n      <Drawer/>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          gunjou's portfolio\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nconst useStyles=makeStyles({\r\n  div:{\r\n    width:'100%',\r\n    textAlign:'center',\r\n    padding:'5px 0',\r\n    position:'absolute',\r\n    bottom:0,\r\n  }\r\n});\r\n\r\nconst Footer=()=>{\r\n  const classes=useStyles();\r\n  return(\r\n    <small className={classes.div}>\r\n      <Divider/>\r\n      <p>©gunjou</p>\r\n    </small>\r\n  )\r\n}\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {BrowserRouter,Route}from 'react-router-dom';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\n\r\nconst useStyles=makeStyles({\r\n  img:{\r\n    float:'left',\r\n  }\r\n})\r\n\r\nconst App=()=>{\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <switch>\r\n        <Route exact path='/'component={Home}/>\r\n        <Route path='/AboutMe'component={AboutMe}/>\r\n      </switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\nconst Home=()=>(\r\n  <div>\r\n    <Header/>\r\n    <p>Reactで作ってるんですがデザインセンスがなさ過ぎてつらいです</p>\r\n    <h5>更新履歴</h5>\r\n    <p>2020/01/05:あまりにも殺風景なので背景色を水色に変更しました</p>\r\n    <p>2020/01/04:ヘッダーとドロワーを付けて仮自己紹介ページを作ってルーティングしました。</p>\r\n    <Footer/>\r\n  </div>\r\n)\r\nconst AboutMe=()=>(\r\n  <div>\r\n    <Header/>\r\n    <Footer/>\r\n    <img src='./shizuku192.png'alt='IconBy荻素'/>\r\n    <h4>自己紹介(仮)</h4>\r\n    <h3>gunjou</h3>\r\n    <h3>久留米高専2年制御情報工学科</h3>\r\n    <h3>2003年3月16日生まれ</h3>\r\n    <h3>\r\n      twitter:\r\n      <a href=\"https://twitter.com/chuni_character\">@chuni_character</a>\r\n    </h3>\r\n  </div>\r\n)\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}