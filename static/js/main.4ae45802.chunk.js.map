{"version":3,"sources":["components/Footer.jsx","components/Drawer.jsx","components/Header.jsx","components/Home.jsx","components/AboutMe.jsx","components/Tweets.jsx","components/Contact.jsx","components/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","div","width","textAlign","padding","position","bottom","Footer","classes","className","Divider","list","isSelect","backgroundColor","paper","background","withRouter","props","now","nowpage","count","i","length","isHomeNow","isAboutMeNow","isTweetsNow","isContactNow","console","log","React","useState","left","state","setState","toggleDrawer","open","event","handleToHome","history","push","handleToAboutMe","handleToTweets","handleToContact","IconButton","onClick","edge","color","SwipeableDrawer","onClose","List","ListItem","ListItemText","theme","menuButton","marginRight","spacing","title","flexGrow","Header","AppBar","style","Toolbar","window","location","href","Typography","variant","Home","AboutMe","src","alt","Tweets","sourceType","screenName","Contact","App","basename","process","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ae45802.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nconst useStyles=makeStyles({\r\n  div:{\r\n    width:'100%',\r\n    textAlign:'center',\r\n    padding:'5px 0',\r\n    position:'absolute',\r\n    bottom:0,\r\n  }\r\n});\r\n\r\nconst Footer=()=>{\r\n  const classes=useStyles();\r\n  return(\r\n    <small className={classes.div}>\r\n      <Divider/>\r\n      <p>©gunjou</p>\r\n    </small>\r\n  )\r\n}\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {withRouter} from 'react-router';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {List,ListItem,IconButton} from '@material-ui/core';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Footer from './Footer';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  isSelect:{\r\n    backgroundColor:'#bce2e8',\r\n  },\r\n  paper:{\r\n    background:'#4c6cb3'\r\n  }\r\n});\r\n\r\nconst Drawer=(props)=>{\r\n  //URLから現在地を抽出\r\n  let now=props.now;\r\n  let nowpage='';\r\n  let count=0;\r\n  for(let i=0;i<now.length;i++){\r\n    if(count>3)nowpage+=now[i];\r\n    if(now[i]==='/')count++;\r\n  }\r\n  //現在地にtrueを渡す\r\n  let isHomeNow=false;\r\n  let isAboutMeNow=false;\r\n  let isTweetsNow=false;\r\n  let isContactNow=false;\r\n  if(nowpage==='')isHomeNow=true;\r\n  if(nowpage==='AboutMe')isAboutMeNow=true;\r\n  if(nowpage==='Tweets')isTweetsNow=true;\r\n  if(nowpage==='Contact')isContactNow=true;\r\n  console.log(nowpage);\r\n\r\n  const classes=useStyles();\r\n\r\n  const [state, setState] = React.useState({left: false});\r\n\r\n  const toggleDrawer=(open)=>event=>setState({'left':open });\r\n\r\n  const handleToHome=()=>{\r\n    props.history.push('./');\r\n  }\r\n  const handleToAboutMe=()=>{\r\n    props.history.push('/AboutMe');\r\n  }\r\n  const handleToTweets=()=>{\r\n    props.history.push('/Tweets');\r\n  }\r\n  const handleToContact=()=>{\r\n    props.history.push('/Contact');\r\n  }\r\n\r\n  const sideList=()=>(\r\n    <div\r\n      className={classes.list}\r\n      onClick={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        <ListItem\r\n          onClick={handleToHome}\r\n          className={isHomeNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>Home</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n        <ListItem\r\n          onClick={handleToAboutMe}\r\n          className={isAboutMeNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>AboutMe</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n        <ListItem\r\n          onClick={handleToTweets}\r\n          className={isTweetsNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>Tweets</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n        <ListItem\r\n          onClick={handleToContact}\r\n          className={isContactNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>Contact</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n      </List>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        onClick={toggleDrawer(true)}\r\n        edge='start'\r\n        color='inherit'\r\n      >\r\n        <MenuIcon/>\r\n      </IconButton>\r\n      <SwipeableDrawer\r\n        open={state.left}\r\n        onClose={toggleDrawer(false)}\r\n        classes={{paper:classes.paper}}\r\n      >\r\n        {sideList()}\r\n      </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Drawer);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Drawer from './Drawer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Header=()=>{\r\n  const classes=useStyles();\r\n  return(\r\n    <AppBar position=\"static\"style={{backgroundColor:'#414fa3'}}>\r\n      <Toolbar>\r\n      <Drawer now={window.location.href}/>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          gunjou's portfolio\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\n\r\nconst Home=()=>(\r\n  <div>\r\n    <Header/>\r\n    <p>Reactで作ってるんですがデザインセンスがなさ過ぎてつらいです</p>\r\n    <h5>更新履歴</h5>\r\n    <p>2020/01/07:ドロワーメニューの現在地を水色で表示させ、Contactページを生やしました。</p>\r\n    <p>2020/01/06:コンポーネントの細分化、ツイートの埋め込みを行いました。</p>\r\n    <p>2020/01/05:あまりにも殺風景なので背景色を水色に変更しました</p>\r\n    <p>2020/01/04:ヘッダーとドロワーを付けて仮自己紹介ページを作ってルーティングしました。</p>\r\n    <Footer/>\r\n  </div>\r\n)\r\nexport default Home;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\n\r\nconst AboutMe=()=>{\r\n  return(\r\n    <div>\r\n      <Header/>\r\n      <Footer/>\r\n      <img src='./shizuku192.png'alt='IconBy荻素'/>\r\n      <h3>gunjou</h3>\r\n      <h3>久留米高専2年制御情報工学科</h3>\r\n      <h3>2003年3月16日生まれ</h3>\r\n    </div>\r\n  );\r\n}\r\nexport default AboutMe;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport {TwitterTimelineEmbed} from 'react-twitter-embed';\r\n\r\nconst Tweets=()=>(\r\n  <div>\r\n    <Header/>\r\n    <TwitterTimelineEmbed  sourceType='profile'screenName='chuni_character'/>\r\n  </div>\r\n)\r\nexport default Tweets;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\n\r\nconst Contact=()=>(\r\n  <div>\r\n    <Header/>\r\n      <p>準備中です。</p>\r\n    <Footer/>\r\n  </div>\r\n)\r\nexport default Contact;\r\n","import React from 'react';\nimport {BrowserRouter,Route}from 'react-router-dom';\nimport Home from './Home';\nimport AboutMe from './AboutMe';\nimport Tweets from './Tweets';\nimport Contact from './Contact';\n\nconst App=()=>{\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <switch>\n        <Route exact path='/'component={Home}/>\n        <Route path='/AboutMe'component={AboutMe}/>\n        <Route path='/Tweets'component={Tweets}/>\n        <Route path='/Contact'component={Contact}/>\n      </switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}