{"version":3,"sources":["components/Drawer.jsx","components/Header.jsx","components/Home.jsx","components/AboutMe.jsx","components/Tweets.jsx","components/Contact.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","isSelect","backgroundColor","paper","background","withRouter","props","now","nowpage","count","i","length","isHomeNow","isAboutMeNow","isTweetsNow","isContactNow","classes","React","useState","left","state","setState","toggleDrawer","open","event","handleToHome","history","push","handleToAboutMe","handleToTweets","handleToContact","IconButton","onClick","edge","color","SwipeableDrawer","onClose","className","List","ListItem","ListItemText","Divider","theme","menuButton","marginRight","spacing","title","flexGrow","Appbar","top","position","Header","AppBar","Toolbar","window","location","href","Typography","variant","Home","AboutMe","src","alt","Tweets","sourceType","screenName","Contact","App","basename","process","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.032d991a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {withRouter} from 'react-router';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {List,ListItem,IconButton} from '@material-ui/core';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  isSelect:{\r\n    backgroundColor:'#bce2e8',\r\n  },\r\n  paper:{\r\n    background:'#4c6cb3'\r\n  }\r\n});\r\n\r\nconst Drawer=(props)=>{\r\n  //URLから現在地を抽出\r\n  let now=props.now;\r\n  let nowpage='';\r\n  let count=0;\r\n  for(let i=0;i<now.length;i++){\r\n    if(count>3)nowpage+=now[i];\r\n    if(now[i]==='/')count++;\r\n  }\r\n  //現在地にtrueを渡す\r\n  let isHomeNow=false;\r\n  let isAboutMeNow=false;\r\n  let isTweetsNow=false;\r\n  let isContactNow=false;\r\n  if(nowpage==='')isHomeNow=true;\r\n  if(nowpage==='AboutMe')isAboutMeNow=true;\r\n  if(nowpage==='Tweets')isTweetsNow=true;\r\n  if(nowpage==='Contact')isContactNow=true;\r\n\r\n  const classes=useStyles();\r\n\r\n  const [state, setState] = React.useState({left: false});\r\n\r\n  const toggleDrawer=(open)=>event=>setState({'left':open });\r\n\r\n  const handleToHome=()=>{\r\n    props.history.push('./');\r\n  }\r\n  const handleToAboutMe=()=>{\r\n    props.history.push('/AboutMe');\r\n  }\r\n  const handleToTweets=()=>{\r\n    props.history.push('/Tweets');\r\n  }\r\n  const handleToContact=()=>{\r\n    props.history.push('/Contact');\r\n  }\r\n\r\n  const sideList=()=>(\r\n    <div\r\n      className={classes.list}\r\n      onClick={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        <ListItem\r\n          onClick={handleToHome}\r\n          className={isHomeNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>Home</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n        <ListItem\r\n          onClick={handleToAboutMe}\r\n          className={isAboutMeNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>AboutMe</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n        <ListItem\r\n          onClick={handleToTweets}\r\n          className={isTweetsNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>Tweets</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n        <ListItem\r\n          onClick={handleToContact}\r\n          className={isContactNow?classes.isSelect:classes.paper}\r\n        >\r\n          <ListItemText>Contact</ListItemText>\r\n        </ListItem>\r\n        <Divider/>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        onClick={toggleDrawer(true)}\r\n        edge='start'\r\n        color='inherit'\r\n      >\r\n        <MenuIcon/>\r\n      </IconButton>\r\n      <SwipeableDrawer\r\n        open={state.left}\r\n        onClose={toggleDrawer(false)}\r\n        classes={{paper:classes.paper}}\r\n      >\r\n        {sideList()}\r\n      </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Drawer);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Drawer from './Drawer';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  Appbar:{\r\n    backgroundColor:'#414fa3',\r\n    top:0,\r\n    position:'sticky',\r\n  }\r\n}));\r\n\r\nconst Header=()=>{\r\n  const classes=useStyles();\r\n  return(\r\n    <AppBar position=\"static\"className={classes.Appbar}>\r\n      <Toolbar>\r\n      <Drawer now={window.location.href}/>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          gunjou's portfolio(仮設)\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header';\r\n\r\nconst Home=()=>(\r\n  <div>\r\n    <Header/>\r\n    <h5>更新履歴</h5>\r\n    <p>2020/01/31:フッターと一部表示を消しました。</p>\r\n    <p>2020/01/07:ドロワーメニューの現在地を水色で表示させ、Contactページを生やしました。</p>\r\n    <p>2020/01/06:コンポーネントの細分化、ツイートの埋め込みを行いました。</p>\r\n    <p>2020/01/05:あまりにも殺風景なので背景色を水色に変更しました</p>\r\n    <p>2020/01/04:ヘッダーとドロワーを付けて仮自己紹介ページを作ってルーティングしました。</p>\r\n  </div>\r\n)\r\nexport default Home;\r\n","import React from 'react';\r\nimport Header from './Header';\r\n\r\nconst AboutMe=()=>{\r\n  return(\r\n    <div>\r\n      <Header/>\r\n      <img src='./shizuku192.png'alt='IconBy荻素'/>\r\n      <h3>HN:gunjou</h3>\r\n      <h3>本名:田栗青空</h3>\r\n      <h3>学校:久留米高専</h3>\r\n      <h3>学科:制御情報工学科</h3>\r\n      <h3>学年:2年生</h3>\r\n      <h3>誕生日:2003年3月16日生まれ</h3>\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default AboutMe;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport {TwitterTimelineEmbed} from 'react-twitter-embed';\r\n\r\nconst Tweets=()=>(\r\n  <div>\r\n    <Header/>\r\n    <TwitterTimelineEmbed  sourceType='profile'screenName='chuni_character'/>\r\n  </div>\r\n)\r\nexport default Tweets;\r\n","import React from 'react';\r\nimport Header from './Header';\r\n\r\nconst Contact=()=>(\r\n  <div>\r\n    <Header/>\r\n    <h2>\r\n      twitter:\r\n      <a href='https://twitter.com/chuni_character'>\r\n        @chuni_character\r\n      </a>\r\n    </h2>\r\n    <h2>\r\n      GitHub:\r\n      <a href=\"https://github.com/cobaltbluesky\">\r\n        @cobaltbluesky\r\n      </a>\r\n    </h2>\r\n  </div>\r\n)\r\nexport default Contact;\r\n","import React from 'react';\r\nimport {BrowserRouter,Route}from 'react-router-dom';\r\nimport Home from './Home';\r\nimport AboutMe from './AboutMe';\r\nimport Tweets from './Tweets';\r\nimport Contact from './Contact';\r\n\r\nconst App=()=>{\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <switch>\r\n        <Route exact path='/'component={Home}/>\r\n        <Route path='/AboutMe'component={AboutMe}/>\r\n        <Route path='/Tweets'component={Tweets}/>\r\n        <Route path='/Contact'component={Contact}/>\r\n      </switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}